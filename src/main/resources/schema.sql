CREATE TABLE IF NOT EXISTS PUBLIC.USERS
(
  ID INTEGER NOT NULL AUTO_INCREMENT,
  EMAIL VARCHAR(100) NOT NULL,
  LOGIN VARCHAR(100) NOT NULL,
  NAME VARCHAR(256),
  BIRTHDAY DATE,
  CONSTRAINT PK_USERS PRIMARY KEY (ID),
  CONSTRAINT PK_USERS PRIMARY KEY (ID),
  CONSTRAINT UX_USERS_EMAIL UNIQUE (EMAIL)
);
COMMENT ON TABLE PUBLIC.USERS IS 'Содержит информацию о пользователях';
COMMENT ON COLUMN PUBLIC.USERS.ID IS 'Уникальный идентификатор';
COMMENT ON COLUMN PUBLIC.USERS.EMAIL IS 'Адрес электронной почты';
COMMENT ON COLUMN PUBLIC.USERS.LOGIN IS 'Логин пользователя';
COMMENT ON COLUMN PUBLIC.USERS.NAME IS 'Имя пользователя';
COMMENT ON COLUMN PUBLIC.USERS.BIRTHDAY IS 'Дата рождения';

CREATE TABLE IF NOT EXISTS PUBLIC.FRIENDS
(
  USER_ID INTEGER NOT NULL,
  FRIEND_ID INTEGER NOT NULL,
  CONSTRAINT PK_FRIENDS PRIMARY KEY (USER_ID, FRIEND_ID),
  CONSTRAINT FK_FRIENDS_USER FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS (ID) ON DELETE RESTRICT ON UPDATE CASCADE,
  CONSTRAINT FK_FRIENDS_FRIEND FOREIGN KEY (FRIEND_ID) REFERENCES PUBLIC.USERS (ID) ON DELETE RESTRICT ON UPDATE CASCADE,
  CONSTRAINT C_FRIENDS CHECK(USER_ID <> FRIEND_ID)
);
COMMENT ON TABLE PUBLIC.FRIENDS IS 'Содержит информацию о друзьях пользователей';
COMMENT ON COLUMN PUBLIC.FRIENDS.USER_ID IS 'Пользователь, ссылка на поле ID таблицы USERS';
COMMENT ON COLUMN PUBLIC.FRIENDS.FRIEND_ID IS 'Друг, ссылка на поле ID таблицы USERS';

CREATE TABLE IF NOT EXISTS PUBLIC.GENRE
(
  ID INTEGER NOT NULL AUTO_INCREMENT,
  NAME VARCHAR(100) NOT NULL,
  CONSTRAINT PK_GENRE PRIMARY KEY (ID)
);
COMMENT ON TABLE PUBLIC.GENRE IS 'Содержит информацию о жанрах фильмов';
COMMENT ON COLUMN PUBLIC.GENRE.ID IS 'Уникальный идентификатор';
COMMENT ON COLUMN PUBLIC.GENRE.NAME IS 'Наименование жанра';

CREATE TABLE IF NOT EXISTS PUBLIC.MPAA
(
  ID INTEGER NOT NULL AUTO_INCREMENT,
  NAME VARCHAR(10) NOT NULL,
  CONSTRAINT PK_MPAA PRIMARY KEY (ID)
);
COMMENT ON TABLE PUBLIC.MPAA IS 'Содержит информацию о рейтингах фильмов';
COMMENT ON COLUMN PUBLIC.MPAA.ID IS 'Уникальный идентификатор';
COMMENT ON COLUMN PUBLIC.MPAA.NAME IS 'Наименование рейтинга';

CREATE TABLE IF NOT EXISTS PUBLIC.FILMS
(
  ID INTEGER NOT NULL AUTO_INCREMENT,
  MPAA_ID INTEGER NOT NULL,
  NAME VARCHAR(100) NOT NULL,
  DESCRIPTION VARCHAR(1000),
  RELEASE_DATE DATE NOT NULL,
  DURATION INTEGER,
  CONSTRAINT PK_FILMS PRIMARY KEY (ID),
  CONSTRAINT FK_FILMS_FILMS FOREIGN KEY (MPAA_ID) REFERENCES PUBLIC.MPAA (ID) ON DELETE RESTRICT ON UPDATE CASCADE
);
COMMENT ON TABLE PUBLIC.FILMS IS 'Содержит информацию о фильмах';
COMMENT ON COLUMN PUBLIC.FILMS.ID IS 'Уникальный идентификатор';
COMMENT ON COLUMN PUBLIC.FILMS.MPAA_ID IS 'Возрастной рейтинг, ссылка на поле ID таблицы RATING';
COMMENT ON COLUMN PUBLIC.FILMS.NAME IS 'Название фильма';
COMMENT ON COLUMN PUBLIC.FILMS.DESCRIPTION IS 'Описание фильма';
COMMENT ON COLUMN PUBLIC.FILMS.RELEASE_DATE IS 'Дата выхода';
COMMENT ON COLUMN PUBLIC.FILMS.DURATION IS 'Длительность фильма в минутах';

CREATE TABLE IF NOT EXISTS PUBLIC.FILM_GENRE
(
  FILM_ID INTEGER NOT NULL,
  GENRE_ID INTEGER NOT NULL,
  CONSTRAINT PK_FILM_GENRE PRIMARY KEY (FILM_ID, GENRE_ID),
  CONSTRAINT FK_FILM_GENRE_FILMS FOREIGN KEY (FILM_ID) REFERENCES PUBLIC.FILMS (ID) ON DELETE RESTRICT ON UPDATE CASCADE,
  CONSTRAINT FK_FILM_GENRE_GENRE FOREIGN KEY (GENRE_ID) REFERENCES PUBLIC.GENRE (ID) ON DELETE RESTRICT ON UPDATE CASCADE
);
COMMENT ON TABLE PUBLIC.FILM_GENRE IS 'Содержит информацию о жанрах присвоенных фильмам';
COMMENT ON COLUMN PUBLIC.FILM_GENRE.FILM_ID IS 'Фильм, ссылка на поле ID таблицы FILMS';
COMMENT ON COLUMN PUBLIC.FILM_GENRE.GENRE_ID IS 'Жанр, ссылка на поле ID таблицы GENRE';

CREATE TABLE IF NOT EXISTS PUBLIC.LIKES
(
  FILM_ID INTEGER NOT NULL,
  USER_ID INTEGER NOT NULL,
  CONSTRAINT PK_LIKES PRIMARY KEY (FILM_ID, USER_ID),
  CONSTRAINT FK_LIKES_FILMS FOREIGN KEY (FILM_ID) REFERENCES PUBLIC.FILMS (ID) ON DELETE RESTRICT ON UPDATE CASCADE,
  CONSTRAINT FK_LIKES_USER FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS (ID) ON DELETE RESTRICT ON UPDATE CASCADE
);
COMMENT ON TABLE PUBLIC.LIKES IS 'Содержит информацию о лайках, поставленных пользователями на фильмах';
COMMENT ON COLUMN PUBLIC.LIKES.FILM_ID IS 'Фильм, ссылка на поле ID таблицы FILMS';
COMMENT ON COLUMN PUBLIC.LIKES.USER_ID IS 'Пользователь, ссылка на поле ID таблицы USERS';

CREATE TABLE IF NOT EXISTS PUBLIC.DIRECTORS
(
  ID INTEGER NOT NULL AUTO_INCREMENT,
  NAME VARCHAR(250) NOT NULL,
  CONSTRAINT PK_DIRECTORS PRIMARY KEY (ID)
);
COMMENT ON TABLE PUBLIC.DIRECTORS IS 'Содержит информацию о режиссерах';
COMMENT ON COLUMN PUBLIC.DIRECTORS.ID IS 'Уникальный идентификатор';
COMMENT ON COLUMN PUBLIC.DIRECTORS.NAME IS 'Имя режиссера';

CREATE TABLE IF NOT EXISTS PUBLIC.FILM_DIRECTOR
(
  FILM_ID INTEGER NOT NULL,
  DIRECTOR_ID INTEGER NOT NULL,
  CONSTRAINT PK_FILM_DIRECTOR PRIMARY KEY (FILM_ID, DIRECTOR_ID),
  CONSTRAINT FK_FILM_DIRECTOR_FILMS FOREIGN KEY (FILM_ID) REFERENCES PUBLIC.FILMS (ID) ON DELETE RESTRICT ON UPDATE CASCADE,
  CONSTRAINT FK_FILM_DIRECTOR_DIRECTORS FOREIGN KEY (DIRECTOR_ID) REFERENCES PUBLIC.DIRECTORS (ID) ON DELETE RESTRICT ON UPDATE CASCADE
);
COMMENT ON TABLE PUBLIC.FILM_DIRECTOR IS 'Содержит информацию о режиссерах, снимавших фильм';
COMMENT ON COLUMN PUBLIC.FILM_DIRECTOR.FILM_ID IS 'Фильм, ссылка на поле ID таблицы FILMS';
COMMENT ON COLUMN PUBLIC.FILM_DIRECTOR.DIRECTOR_ID IS 'Режиссер, ссылка на поле ID таблицы DIRECTORS';